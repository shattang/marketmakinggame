@implements IDisposable
@using Lib
@inject MainViewModel MainViewModel

<MatDialog @bind-IsOpen="@ViewModel.IsCreateGameFailedDialogVisible">
  <MatDialogTitle>
    <MatIcon Icon="warning"></MatIcon>&nbsp;Request Failed
  </MatDialogTitle>
  <MatDialogContent>
    <p>@ViewModel.CreateGameFailedDialogMessage</p>
  </MatDialogContent>
  <MatDialogActions>
    <MatButton OnClick="@(e => { ViewModel.IsCreateGameFailedDialogVisible = false; })">Close</MatButton>
  </MatDialogActions>
</MatDialog>

<MatCard>
  <div style="background: #673ab7; color: white; font-size: 100%">
    <MatHeadline6>Create New Game</MatHeadline6>
  </div>
  <MatCardContent>
    <MatBody2>
      <Paragraph>
        <EditForm Model="ViewModel">
          <DataAnnotationsValidator />
          <MatTextField FullWidth="true" Label="Game Name" @bind-Value="@ViewModel.GameName" />
          <ValidationMessage For="@(() => @ViewModel.GameName)" style="font-size: x-small;" />
        </EditForm>
      </Paragraph>
    </MatBody2>
  </MatCardContent>
  <MatCardActions>
    <MatCardActionIcons>
      <MatButton Raised="true" TrailingIcon="@ViewModel.SubmitButtonIcon" OnClick="@ViewModel.OnSubmitButtonClicked"
Disabled="@ViewModel.IsSubmitButtonDisabled">@ViewModel.SubmitButtonText
      </MatButton>
    </MatCardActionIcons>
  </MatCardActions>
</MatCard>

@if (ViewModel.CreatedGameNames != null && ViewModel.CreatedGameNames.Count > 0)
{
  <p></p>
  <p></p>
  <MatCard>
    <div style="background: #673ab7; color: white; font-size: 100%">
      <MatHeadline6>Join Existing Game</MatHeadline6>
    </div>
    <MatCardContent>
      <MatBody2>
        <Paragraph>
          <p></p>
          @foreach (var item in ViewModel.CreatedGameNames)
                            {
                              <p>
                                <MatButton style="width: 100%;" Outlined="true">@item</MatButton>
                              </p>
                            }
                          </Paragraph>
                        </MatBody2>
                      </MatCardContent>
                    </MatCard>
}

                    @code {
  GameManagerViewModel ViewModel => MainViewModel.GameManagerViewModel;

  protected override async Task OnInitializedAsync()
  {
    MainViewModel.GameManagerViewModel.StateChanged += OnViewModelChanged;
    await MainViewModel.InitializeAsync();
  }

  void OnViewModelChanged(EventArgs args)
  {
    StateHasChanged();
  }

  public void Dispose()
  {
    MainViewModel.GameManagerViewModel.StateChanged -= OnViewModelChanged;
  }
}