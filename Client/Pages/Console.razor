@page "/console"
@implements IDisposable
@using Lib
@using MarketMakingGame.Shared.Messages
@using MarketMakingGame.Shared.Models
@inject UserDataEditorViewModel UserDataEditorViewModel
@inject GameClient GameClient

<div class="form-group">
  <label>
    Mesage:
    <input @bind="messageInput" />
  </label>
</div>
<button @onclick="SendCreateGameRequest" disabled="@(!IsConnected)">Create Game</button>
<button @onclick="SendJoinGameRequest" disabled="@(!IsConnected)">Join Game</button>
<hr>
<ul id="messagesList">
  @foreach (var message in messages)
  { <li>@message</li> }
</ul>

@code
{
  private List<string> messages = new List<string>();
  private string messageInput;

  protected override async Task OnInitializedAsync()
  {
    await UserDataEditorViewModel.InitViewModelAsync();
    GameClient.OnIsConnectedChanged += OnIsConnectedChanged;
    GameClient.OnCreateGameResponse += OnCreateGameResponse;
    GameClient.OnJoinGameResponse += OnJoinGameResponse;
    await GameClient.InitViewModelAsync();
  }

  void OnIsConnectedChanged(bool isConnected)
  {
    StateHasChanged();
  }

  void OnCreateGameResponse(CreateGameResponse message)
  {
    AddToMessageList(message);
  }

  void OnJoinGameResponse(JoinGameResponse message)
  {
    AddToMessageList(message);
  }

  void AddToMessageList<T>(T message)
  {
    messages.Add($"{message}");
    StateHasChanged();
  }

  Task SendCreateGameRequest()
  {
    var message = new CreateGameRequest()
    {
      Player = new Player() 
      { 
        DisplayName = UserDataEditorViewModel.Data.DisplayName, 
        PlayerId = UserDataEditorViewModel.Data.PlayerId,
        AvatarSeed = UserDataEditorViewModel.Data.AvatarSeed
      },
      Game = new Game()
      {
        GameName = messageInput
      }
    };
    return GameClient.SendRequestAsync("CreateGame", message);
  }

  Task SendJoinGameRequest()
  {
    var message = new JoinGameRequest()
    {
      Player = UserDataEditorViewModel.Data,
      GameId = messageInput
    };
    return GameClient.SendRequestAsync("JoinGame", message);
  }

  public bool IsConnected => GameClient.IsConnected;

  public void Dispose()
  {
    GameClient.OnIsConnectedChanged -= OnIsConnectedChanged;
    GameClient.OnCreateGameResponse -= OnCreateGameResponse;
    GameClient.OnJoinGameResponse -= OnJoinGameResponse;
  }
}