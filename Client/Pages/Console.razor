@page "/console"
@implements IDisposable
@using Lib
@using MarketMakingGame.Shared.Messages
@inject MainViewModel MainViewModel

<div class="form-group">
  <label>
    Mesage:
    <input @bind="messageInput" />
  </label>
</div>
<button @onclick="SendCreateGameRequest" disabled="@(!IsConnected)">Create Game</button>
<button @onclick="SendJoinGameRequest" disabled="@(!IsConnected)">Join Game</button>
<hr>
<ul id="messagesList">
  @foreach (var message in messages)
  { <li>@message</li> }
</ul>

@code
{
  private List<string> messages = new List<string>();
  private string messageInput;

  protected override async Task OnInitializedAsync()
  {
    MainViewModel.GameClient.OnIsConnectedChanged += OnIsConnectedChanged;
    MainViewModel.GameClient.OnCreateGameResponse += OnCreateGameResponse;
    MainViewModel.GameClient.OnJoinGameResponse += OnJoinGameResponse;
    await MainViewModel.InitializeAsync();
  }

  void OnIsConnectedChanged(bool isConnected)
  {
    StateHasChanged();
  }

  void OnCreateGameResponse(CreateGameResponse message)
  {
    AddToMessageList(message);
  }

  void OnJoinGameResponse(JoinGameResponse message)
  {
    AddToMessageList(message);
  }

  void AddToMessageList<T>(T message)
  {
    messages.Add($"{message}");
    StateHasChanged();
  }

  Task SendCreateGameRequest()
  {
    var message = new CreateGameRequest()
    {
      UserName = MainViewModel.UserDataEditorViewModel.DisplayName,
      UserId = MainViewModel.UserDataEditorViewModel.UserId,
      UserAvatar = MainViewModel.UserDataEditorViewModel.AvatarSeed,
      GameName = messageInput
    };
    return MainViewModel.GameClient.SendRequestAsync("CreateGame", message);
  }

  Task SendJoinGameRequest()
  {
    var message = new JoinGameRequest()
    {
      UserName = MainViewModel.UserDataEditorViewModel.DisplayName,
      UserId = MainViewModel.UserDataEditorViewModel.UserId,
      UserAvatar = MainViewModel.UserDataEditorViewModel.AvatarSeed,
      GameId = messageInput
    };
    return MainViewModel.GameClient.SendRequestAsync("JoinGame", message);
  }

  public bool IsConnected => MainViewModel.GameClient.IsConnected;

  public void Dispose()
  {
    MainViewModel.GameClient.OnIsConnectedChanged -= OnIsConnectedChanged;
    MainViewModel.GameClient.OnCreateGameResponse -= OnCreateGameResponse;
    MainViewModel.GameClient.OnJoinGameResponse -= OnJoinGameResponse;
  }
}