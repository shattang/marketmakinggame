@implements IDisposable
@using MarketMakingGame.Client.Lib
@inject AppViewModel AppViewModel

<div class="mat-layout-grid">
  <div class="mat-layout-grid-inner">
    <div class="mat-layout-grid-cell-span mat-layout-grid-cell-span-2">
      <img src="@ViewModel.AvatarUrl" width=64 height=64 @onclick="AppViewModel.UserDataEditorViewModel.RefreshAvatar"
style="border-radius: 10%;border-style: dotted;border-width: thin;" title="Click to change Avatar" />
    </div>
    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
      <EditForm Model="AppViewModel.UserDataEditorViewModel">
        <DataAnnotationsValidator />
        <MatStringField Label="Display Name" @bind-Value="@ViewModel.DisplayName" />
        <ValidationMessage For="@(() => @ViewModel.DisplayName)" style="font-size: x-small;" />
      </EditForm>
    </div>
  </div>
</div>

@code {
  UserDataEditorViewModel ViewModel => AppViewModel.UserDataEditorViewModel;

  protected override async Task OnInitializedAsync()
  {
    ViewModel.StateChanged += OnViewModelChanged;
    await AppViewModel.InitializeAsync();
  }

  void OnViewModelChanged(EventArgs e)
  {
    StateHasChanged();
  }

  public void Dispose()
  {
    ViewModel.StateChanged -= OnViewModelChanged;
  }
}
