@implements IDisposable
@using Lib
@using System
@inject MainViewModel MainViewModel

<MatDialog @bind-IsOpen="@MainViewModel.UserDataEditorViewModel.IsUserDataEditorOpen" CanBeClosed="false">
  <MatDialogTitle>Select Avatar</MatDialogTitle>
  <MatDialogContent>
    <UserDataEditor />
  </MatDialogContent>
  <MatDialogActions>
    <MatButton OnClick="@OnUserDataEditorDialogClickOk">OK</MatButton>
  </MatDialogActions>
</MatDialog>

<MatButton OnClick="@OpenUserDataEditorDialog">
  <img src="@MainViewModel.UserDataEditorViewModel.AvatarUrl" width=32 height=32 />
  @MainViewModel.UserDataEditorViewModel.Data.DisplayName
</MatButton>

@code
{
  protected override async Task OnInitializedAsync()
  {
    MainViewModel.UserDataEditorViewModel.StateChanged += OnUserDataViewModelChanged;
    await MainViewModel.InitializeAsync();
  }

  void OnUserDataViewModelChanged(EventArgs e)
  {
    StateHasChanged();
  }

  void OpenUserDataEditorDialog()
  {
    MainViewModel.UserDataEditorViewModel.IsUserDataEditorOpen = true;
  }

  void OnUserDataEditorDialogClickOk()
  {
    var res = MainViewModel.UserDataEditorViewModel.CheckValid();
    if (!res.Success)
    {
      System.Console.WriteLine(res.ErrorMessages);
      System.Console.WriteLine(MainViewModel.UserDataEditorViewModel.Data);
      return;
    }
    MainViewModel.UserDataEditorViewModel.SaveUserData();
    MainViewModel.UserDataEditorViewModel.IsUserDataEditorOpen = false;
  }

  public void Dispose()
  {
    MainViewModel.UserDataEditorViewModel.StateChanged -= OnUserDataViewModelChanged;
  }
}
