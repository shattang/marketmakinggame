@page "/"
@using Lib
@using MarketMakingGame.Shared.Messages
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging;
@inject NavigationManager NavigationManager
@inject ILoggerProvider LoggerProvider
@implements IDisposable

<div class="form-group">
  <label>
    User:
    <input @bind="userInput" />
  </label>
</div>
<div class="form-group">
  <label>
    Message:
    <input @bind="messageInput" size="50" />
  </label>
</div>
<button @onclick="SendCreateGameRequest" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
  @foreach (var message in messages)
  {
    <li>@message</li>
  }
</ul>

@code {
  private HubConnection hubConnection;
  private List<string> messages = new List<string>();
  private string userInput;
  private string messageInput;
  private ILogger logger;

  protected override async Task OnInitializedAsync()
  {
    logger = LoggerProvider.CreateLogger("Index");
    hubConnection = new HubConnectionBuilder()
      .WithUrl(NavigationManager.ToAbsoluteUri("gamehub"))
    .WithAutomaticReconnect(new RandomRetryPolicy())
    .ConfigureLogging(logging => logging.AddProvider(LoggerProvider))
    .Build();

    hubConnection.On<CreateGameResponse>("GameCreated", (message) =>
    {
      logger.LogInformation("Received Response: {}", message);
      var encodedMsg = $"CreateGameResponse={message}";
      messages.Add(encodedMsg);
      StateHasChanged();
    });

    hubConnection.Closed += (ex) =>
    {
      Console.WriteLine("Closed...");
      return Task.CompletedTask;
    };

    hubConnection.Reconnected += (ex) =>
    {
      Console.WriteLine("Reconnected...");
      return Task.CompletedTask;
    };

    hubConnection.Reconnecting += (ex) =>
    {
      Console.WriteLine("Reconnecting...");
      return Task.CompletedTask;
    };

    await hubConnection.StartAsync();
  }

  Task SendCreateGameRequest()
  {
    var message = new CreateGameRequest()
    {
      GameName = messageInput,
      UserName = userInput
    };
    return SendRequest(message);
  }

  Task SendRequest<T>(T message)
  {
    logger.LogInformation("Sending Request: {}", message);
    return hubConnection.SendAsync("CreateGame", message);
  }

  public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

  public void Dispose()
  {
    _ = hubConnection.DisposeAsync();
  }
}