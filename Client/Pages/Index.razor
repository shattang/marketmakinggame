@page "/"
@implements IDisposable
@using Lib
@using MarketMakingGame.Shared.Messages
@using MarketMakingGame.Shared.Lib
@using Microsoft.Extensions.Logging;
@using Models
@using System.ComponentModel.DataAnnotations
@using ViewModels
@inject NavigationManager NavigationManager
@inject ILoggerProvider LoggerProvider
@inject GameClient GameClient
@inject Blazored.LocalStorage.ILocalStorageService LocalStore
@inject IJSRuntime JsRuntime;

<div class="docs-example">
  <BSForm Model="@userDataViewModel" ValidateOnInit="true" OnSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <BSFormGroup>
      <BSLabel For="exampleEmail4">Valid input</BSLabel>
      <BSInput InputType="InputType.Text" Id="exampleEmail4" @bind-Value="@userDataViewModel.UserName" />
      <BSFormFeedback For="@(() => userDataViewModel.UserName)" ValidMessage="Sweet! that name is available" />
      <BSButton Color="Color.Primary" ButtonType="ButtonType.Submit">Submit</BSButton>
    </BSFormGroup>
  </BSForm>

</div>

<BSImage IsThumbnail="true" src=@($"https://avatars.dicebear.com/api/gridy/{userDataViewModel.AvatarSeed}.svg")
alt="User Avatar" @onclick="userDataViewModel.RefreshAvatar" width=64 height=64 />


@code {
  void OnValidSubmit()
  {
    JsRuntime.InvokeVoidAsync("alert", "submit");
  }
}

<div class="form-group">
  <label>
    User:
    <input @bind="userInput" />
  </label>
</div>
<div class="form-group">
  <label>
    Game Name or Id:
    <input @bind="messageInput" size="50" />
  </label>
</div>
<button @onclick="SendCreateGameRequest" disabled="@(!IsConnected)">Create Game</button>
<button @onclick="SendJoinGameRequest" disabled="@(!IsConnected)">Join Game</button>
<button @onclick="userDataViewModel.RefreshAvatar">Refresh Avatar</button>

<hr>

<ul id="messagesList">
  @foreach (var message in messages)
  {
    <li>@message</li>
  }
</ul>

@code {
  UserDataViewModel userDataViewModel = new UserDataViewModel();
  private List<string> messages = new List<string>();
  private string userInput;
  private string messageInput;

  protected override async Task OnInitializedAsync()
  {
    userDataViewModel.StateChanged += OnUserDataViewModelChanged;
    await userDataViewModel.InitializeAsync(LocalStore);
    GameClient.OnIsConnectedChanged += OnIsConnectedChanged;
    GameClient.OnCreateGameResponse += OnCreateGameResponse;
    GameClient.OnJoinGameResponse += OnJoinGameResponse;
    await GameClient.StartAsync();
  }

  void OnUserDataViewModelChanged(EventArgs eventArgs)
  {
    Console.WriteLine("ViewModel Changed!");
    StateHasChanged();
  }

  void OnIsConnectedChanged(bool isConnected)
  {
    StateHasChanged();
  }

  void OnCreateGameResponse(CreateGameResponse message)
  {
    AddToMessageList(message);
  }

  void OnJoinGameResponse(JoinGameResponse message)
  {
    AddToMessageList(message);
  }

  void AddToMessageList<T>(T message)
  {
    messages.Add($"{message}");
    StateHasChanged();
  }

  Task SendCreateGameRequest()
  {
    var message = new CreateGameRequest()
    {
      GameName = messageInput,
      UserName = userInput
    };
    return GameClient.SendRequestAsync("CreateGame", message);
  }

  Task SendJoinGameRequest()
  {
    var message = new JoinGameRequest()
    {
      UserName = userInput,
      GameId = messageInput
    };
    return GameClient.SendRequestAsync("JoinGame", message);
  }

  public bool IsConnected => GameClient.IsConnected;

  public void Dispose()
  {
    GameClient.Dispose();
  }
}