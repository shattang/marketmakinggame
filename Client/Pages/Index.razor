@page "/"
@using Lib
@using MarketMakingGame.Shared.Messages
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging;
@inject NavigationManager NavigationManager
@inject ILoggerProvider LoggerProvider
@inject GameClient GameClient
@implements IDisposable

<div class="form-group">
  <label>
    User:
    <input @bind="userInput" />
  </label>
</div>
<div class="form-group">
  <label>
    Message:
    <input @bind="messageInput" size="50" />
  </label>
</div>
<button @onclick="SendCreateGameRequest" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
  @foreach (var message in messages)
  {
    <li>@message</li>
  }
</ul>

@code {
  private List<string> messages = new List<string>();
  private string userInput;
  private string messageInput;

  protected override async Task OnInitializedAsync()
  {
    GameClient.OnIsConnectedChanged += OnIsConnectedChanged;
    GameClient.OnCreateGameResponse += OnCreateGameResponse;
    GameClient.OnJoinGameResponse += OnJoinGameResponse;
    await GameClient.StartAsync();
  }

  void OnIsConnectedChanged(bool isConnected)
  {
    StateHasChanged();
  }

  void OnCreateGameResponse(CreateGameResponse message)
  {
    var encodedMsg = $"{message}";
    messages.Add(encodedMsg);
    StateHasChanged();
  }

  void OnJoinGameResponse(JoinGameResponse message)
  {
    var encodedMsg = $"JoinGameResponse={message}";
    messages.Add(encodedMsg);
    StateHasChanged();
  }

  Task SendCreateGameRequest()
  {
    var message = new CreateGameRequest()
    {
      GameName = messageInput,
      UserName = userInput
    };
    return GameClient.SendRequestAsync("CreateGame", message);
  }

  public bool IsConnected => GameClient.IsConnected;

  public void Dispose()
  {
    GameClient.Dispose();
  }
}