@page "/playgame/{gameid}"
@implements IDisposable
@using MarketMakingGame.Client.Lib
@inject GamePlayerViewModel GamePlayerViewModel
@inject UserDataEditorViewModel UserDataEditorViewModel

<style>
  .card-image-cls {
    width: 100%;
    height: 128px;
    max-width: 100%;
    max-height: 100%;
  }
  .card-group-cls {
    display: flex;
    flex-flow: row;
    width: 100%;
    height: 100%;
    border-radius: 10px
  }
  .community-card-group-cls {
    background-color: darkgreen;
    width: 80%
  }
  .user-card-group-cls {
    background-color: #8a6833;
    width: 20%
  }
  .card-content-cls {
    height: 100%;
    margin: 5px;
  }
  .card-panel-cls {
    gap: 30px;
  }
</style>

<div>

  <AppTopBar />

  <p></p>
  <MatDivider />
  <p></p>

  @if (ViewModel.IsInitialized)
  {
    @if (ViewModel.JoinGameResponse.IsSuccess)
    {
      <div class="mat-elevation-z1" style="border-style: solid; border-color: lightgray; border-radius: 10px; border-width: thin; padding-left: 20px; background-color: #f5f5f5;">
          @ViewModel.JoinGameResponse.Game.GameName
      </div>
      <p/>
      <p/>

      <div class="card-group-cls card-panel-cls">
          <div class="column card-group-cls user-card-group-cls mat-elevation-z5">
            <div class="card-content-cls">
              <img class="card-image-cls" src="@ViewModel.GamePlayerCardImageUrl()"/>
            </div>
          </div>
          <div class="column card-group-cls community-card-group-cls mat-elevation-z5">
            @for (var i = 0; i < ViewModel.JoinGameResponse.Game.NumberOfRounds; ++i)
            {
              <div class="card-content-cls">
                <img class="card-image-cls" src="@ViewModel.GetCommunityCardImageUrl(i)"/>
              </div>
            }
          </div>
      </div>

      @if (ViewModel.PlayerUpdateResponse.IsDealer)
      {
        <p/>
        <p/>
        <div class="mat-elevation-z1 dealer-actions-panel-cls">
          <p>TODO: Dealer Actions</p>
        </div>
      }

      <p/>
      <p/>
      <div class="mat-elevation-z1 player-actions-panel-cls">
        <p>TODO: Player Actions</p>
      </div>

      <p/>
      <p/>
      <div class="mat-elevation-z1 user-list-panel-cls">
        <MatTable Items="@ViewModel.PlayersData" ShowPaging="false">
            <MatTableHeader>
                <th>Player</th>
                <th>Bid</th>
                <th>Offer</th>
            </MatTableHeader>
            <MatTableRow>
                <td>
                  <img src="@context.PlayerImageUrl" width=16 height=16/>
                  @context.PlayerName
                </td>
                <td>@context.Bid</td>
                <td>@context.Offer</td>
            </MatTableRow>
        </MatTable>
      </div>
    }
    else 
    {
      <h1>Error</h1>
      <p>@ViewModel.JoinGameResponse.ErrorMessage</p>
    }
  }
  else if (ViewModel.JoinGameResponse?.IsSuccess == false)
  {
    <h1>Error</h1>
    <p>@ViewModel.JoinGameResponse.ErrorMessage</p>
  }
  else
  {
    <p>Joining Game @GameId ...</p>
  }

</div>

@code {

  [Parameter]
  public string GameId { get; set; }

  public GamePlayerViewModel ViewModel => GamePlayerViewModel;

  protected override async Task OnInitializedAsync()
  {
    await UserDataEditorViewModel.InitViewModelAsync();
    if (!UserDataEditorViewModel.CheckValid().Success)
    {
      UserDataEditorViewModel.IsUserDataEditorOpen = true;

      while(!UserDataEditorViewModel.CheckValid().Success)
      {
        await Task.Delay(200);
      }
    }

    ViewModel.GameId = GameId;
    ViewModel.StateChanged += OnViewModelChanged;
    await ViewModel.InitViewModelAsync();


  }

  void OnViewModelChanged(EventArgs e)
  {
    StateHasChanged();
  }

  public void Dispose()
  {
    ViewModel.StateChanged -= OnViewModelChanged;
  }
}
