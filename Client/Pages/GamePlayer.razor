@page "/playgame/{gameid}"
@implements IDisposable
@using MarketMakingGame.Client.Lib
@inject GamePlayerViewModel GamePlayerViewModel
@inject UserDataEditorViewModel UserDataEditorViewModel

<style>
  .game-community-card-img-cls {
    width: 100%;
    height: 100%;
    max-width:100%;
    max-height:100%;
  }
  .game-community-cards-parent-cls {
    display: flex;
    flex-flow: row;
    width:100%;
    height: 100%;
  }
  .game-community-cards-child-cls {
    flex-grow: 1;
    flex-shrink: 1;
    height: 100%;
  }
</style>
<p>
  @if (ViewModel.IsInitialized)
  {
    <div class="row" style="border-style: dashed;">
      @ViewModel.JoinGameResponse.Game.GameName
      <UserBadge/>
    </div>

    <div class="row game-community-cards-parent-cls">
        @for (var i = 0; i < ViewModel.JoinGameResponse.Game.NumberOfRounds; ++i)
        {
          <div class="column game-community-cards-child-cls">
            <img class="game-community-card-img-cls" src="@ViewModel.GetCommunityCardImageUrl(i)"/>
          </div>
        }
    </div>

    @if (ViewModel.PlayerUpdateResponse.IsDealer)
    {
      <div class="row" style="border-style: dashed;">
        <p>TODO: Dealer Actions</p>
      </div>
    }

    <div class="row" style="border-style: dashed;">
      @{
        for(var i = 0; i < ViewModel.GameUpdateResponse.PlayerPublicStates.Count; ++i)
        {
          var player = ViewModel.GameUpdateResponse.PlayerPublicStates[i];
          <div>
              <p>@player.DisplayName</p>
          </div>
        }
      }
    </div>
  }
  else
  {
    <p>Joining Game @GameId ...</p>
  }
</p>

@code {
  [Parameter]
  public string GameId { get; set; }

  public GamePlayerViewModel ViewModel => GamePlayerViewModel;

  protected override async Task OnInitializedAsync()
  {
    await UserDataEditorViewModel.InitViewModelAsync();
    if (!UserDataEditorViewModel.CheckValid().Success)
    {
      UserDataEditorViewModel.IsUserDataEditorOpen = true;
    }

    ViewModel.GameId = GameId;
    ViewModel.StateChanged += OnViewModelChanged;
    await ViewModel.InitViewModelAsync();
  }

  void OnViewModelChanged(EventArgs e)
  {
    StateHasChanged();
  }

  public void Dispose()
  {
    ViewModel.StateChanged -= OnViewModelChanged;
  }
}
