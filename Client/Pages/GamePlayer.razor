@page "/playgame/{gameid}"
@implements IDisposable
@using MarketMakingGame.Client.Lib
@inject GamePlayerViewModel GamePlayerViewModel
@inject UserDataEditorViewModel UserDataEditorViewModel

<style>
  .game-community-card-img-cls {
    width: 100%;
    height: 100%;
    max-width:100%;
    max-height:100%;
  }
  .game-community-cards-parent-cls {
    display: flex;
    flex-flow: row;
    width:100%;
    height: 100%;
  }
  .game-community-cards-child-cls {
    height: 100%;
    margin: 5px;
  }
</style>

<UserBadge/>

@if (ViewModel.IsInitialized)
{
  @if (ViewModel.JoinGameResponse.IsSuccess)
  {
    <div class="row" style="border-style: dashed;">
      @ViewModel.JoinGameResponse.Game.GameName
    </div>

    <div class="row game-community-cards-parent-cls">
        <div class="column game-community-cards-child-cls mat-elevation-z5">
            <MatCard class="demo-mat-card">
            <div class="demo-mat-card-content">
                <MatHeadline6 class="demo-mat-card-clean-margin">
                    Our Changing Planet
                </MatHeadline6>
                <MatSubtitle2 class="demo-mat-card-clean-margin">
                    by Kurt Wagner
                </MatSubtitle2>
            </div>
            <MatCardContent>
                <MatCardMedia Wide="true" ImageUrl="https://material-components.github.io/material-components-web-catalog/static/media/photos/3x2/2.jpg"></MatCardMedia>
                <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin">
                    Visit ten places on our planet that are undergoing the biggest changes today.
                </MatBody2>
            </MatCardContent>
            <MatCardActions>
                <MatCardActionButtons>
                    <MatButton>Read</MatButton>
                    <MatButton>Bookmark</MatButton>
                </MatCardActionButtons>
 
                <MatCardActionIcons>
                    <MatIconButton Icon="@MatIconNames.Favorite"></MatIconButton>
                    <MatIconButton Icon="@MatIconNames.Dashboard"></MatIconButton>
                </MatCardActionIcons>
            </MatCardActions>
            </MatCard>
            @* <img class="game-community-card-img-cls" src="@ViewModel.GamePlayerCardImageUrl()"/> *@
        </div>
        @for (var i = 0; i < ViewModel.JoinGameResponse.Game.NumberOfRounds; ++i)
        {
          <div class="column game-community-cards-child-cls mat-elevation-z5">
            <img class="game-community-card-img-cls" src="@ViewModel.GetCommunityCardImageUrl(i)"/>
          </div>
        }
    </div>
      
    @if (ViewModel.PlayerUpdateResponse.IsDealer)
    {
      <div class="row" style="border-style: dashed;">
        <p>TODO: Dealer Actions</p>
      </div>
    }

    <div class="row" style="border-style: dashed;">
      @{
        for(var i = 0; i < ViewModel.GameUpdateResponse.PlayerPublicStates.Count; ++i)
        {
          var player = ViewModel.GameUpdateResponse.PlayerPublicStates[i];
          <div>
              <p>@player.DisplayName</p>
          </div>
        }
      }
    </div>
  }
  else 
  {
    <h1>Error</h1>
    <p>@ViewModel.JoinGameResponse.ErrorMessage</p>
  }
}
else if (ViewModel.JoinGameResponse?.IsSuccess == false)
{
  <h1>Error</h1>
  <p>@ViewModel.JoinGameResponse.ErrorMessage</p>
}
else
{
  <p>Joining Game @GameId ...</p>
}

@code {
  [Parameter]
  public string GameId { get; set; }

  public GamePlayerViewModel ViewModel => GamePlayerViewModel;

  protected override async Task OnInitializedAsync()
  {
    await UserDataEditorViewModel.InitViewModelAsync();
    if (!UserDataEditorViewModel.CheckValid().Success)
    {
      UserDataEditorViewModel.IsUserDataEditorOpen = true;

      while(!UserDataEditorViewModel.CheckValid().Success)
      {
        await Task.Delay(200);
      }
    }

    ViewModel.GameId = GameId;
    ViewModel.StateChanged += OnViewModelChanged;
    await ViewModel.InitViewModelAsync();


  }

  void OnViewModelChanged(EventArgs e)
  {
    StateHasChanged();
  }

  public void Dispose()
  {
    ViewModel.StateChanged -= OnViewModelChanged;
  }
}
