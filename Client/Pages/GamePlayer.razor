@page "/playgame/{gameid}"
@implements IDisposable
@using MarketMakingGame.Client.Lib
@inject GamePlayerViewModel GamePlayerViewModel
@inject UserDataEditorViewModel UserDataEditorViewModel

<style>
  .card-image-cls {
    width: 100%;
    height: 128px;
    max-width:100%;
    max-height:100%;
  }
  .card-group-cls {
    display: flex;
    flex-flow: row;
    width:100%;
    height: 100%;
  }
  .community-card-group-cls {
    background-color: coral;
    border-style: dotted;
  }
  .card-content-cls {
    height: 100%;
    margin: 5px;
  }
</style>

<div class="row">
  <table style="width: 100%;">
    <tr>
      <td style="width: 10%;">
      </td>
      <td style="width: 80%;">
        <div style="text-align: center; display: inline-block; width: 100%;">
          <MatHeadline5 style="font-family: font-family: 'Times New Roman', Times, serif;"><img src="images/poker.png" width=32
            height=32 /> The Market Maker's Poker</MatHeadline5>
        </div>
      </td>
      <td style="width: 10%;">
        <UserBadge />
      </td>
    </tr>
  </table>
</div>

@if (ViewModel.IsInitialized)
{
  @if (ViewModel.JoinGameResponse.IsSuccess)
  {
    <div class="row" style="border-style: dashed;">
      @ViewModel.JoinGameResponse.Game.GameName
    </div>

    <div class="row card-group-cls">
        <div class="column card-content-cls mat-elevation-z5">
          <img class="card-image-cls" src="@ViewModel.GamePlayerCardImageUrl()"/>
        </div>
        <div class="column card-group-cls mat-elevation-z5">
          @for (var i = 0; i < ViewModel.JoinGameResponse.Game.NumberOfRounds; ++i)
          {
            @* <div class="card-content-cls mat-elevation-z5"> *@
              <img class="card-image-cls" src="@ViewModel.GetCommunityCardImageUrl(i)"/>
            @* </div> *@
          }
        </div>
    </div>
      
    @if (ViewModel.PlayerUpdateResponse.IsDealer)
    {
      <div class="row" style="border-style: dashed;">
        <p>TODO: Dealer Actions</p>
      </div>
    }

    <div class="row" style="border-style: dashed;">
      @{
        for(var i = 0; i < ViewModel.GameUpdateResponse.PlayerPublicStates.Count; ++i)
        {
          var player = ViewModel.GameUpdateResponse.PlayerPublicStates[i];
          <div>
              <p>@player.DisplayName</p>
          </div>
        }
      }
    </div>
  }
  else 
  {
    <h1>Error</h1>
    <p>@ViewModel.JoinGameResponse.ErrorMessage</p>
  }
}
else if (ViewModel.JoinGameResponse?.IsSuccess == false)
{
  <h1>Error</h1>
  <p>@ViewModel.JoinGameResponse.ErrorMessage</p>
}
else
{
  <p>Joining Game @GameId ...</p>
}

@code {
  [Parameter]
  public string GameId { get; set; }

  public GamePlayerViewModel ViewModel => GamePlayerViewModel;

  protected override async Task OnInitializedAsync()
  {
    await UserDataEditorViewModel.InitViewModelAsync();
    if (!UserDataEditorViewModel.CheckValid().Success)
    {
      UserDataEditorViewModel.IsUserDataEditorOpen = true;

      while(!UserDataEditorViewModel.CheckValid().Success)
      {
        await Task.Delay(200);
      }
    }

    ViewModel.GameId = GameId;
    ViewModel.StateChanged += OnViewModelChanged;
    await ViewModel.InitViewModelAsync();


  }

  void OnViewModelChanged(EventArgs e)
  {
    StateHasChanged();
  }

  public void Dispose()
  {
    ViewModel.StateChanged -= OnViewModelChanged;
  }
}
